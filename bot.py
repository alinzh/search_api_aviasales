import telebot
from telebot import types
from route import Route
from search import Search
from serchrequestdata import SearchRequestData
from check_answer import CheckData


bot = telebot.TeleBot("6182172702:AAE-aoQSvCTuyIWKv6zCrXMDM4CB6sYbJtY", parse_mode=None)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–ª–∞–≥–æ–≤, —á—Ç–æ –≤–≤–æ–¥—è—Ç —é–∑–µ—Ä—ã (—Ç—É—Ç –≤—Å–µ, –∫—Ç–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —á—Ç–æ-—Ç–æ –≤–≤–æ–¥–∏—Ç)
users_state = {}

from enum import IntEnum
class UserStates(IntEnum):
    WAIT_FOR_TRANSIT_PERIOD = 1
    WAIT_FOR_AIRPORT = 2
    WAIT_FOR_START = 3
    WAIT_FOR_HOME = 4
    WAIT_FOR_DATA_HOME_DEPARTURE = 5
    WAIT_FOR_CIRCLE_OR_NOT = 6
    WAIT_FOR_FINISH_DEPARTURE = 7
    WAIT_FOR_CHOOSE = 8
    WAIT_FOR_HATE_AIRL = 9
    WAIT_FOR_END = 10
    WAIT_FOR_FINISH_AIRPORT = 11
    WAIT_FOR_MORE_TICKETS = 12



class UserState:
    def __init__(self):
        self.state = None
        self.search_request_data = SearchRequestData()
        self.best_in_price = None
        self.best_in_time = None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='compute_route'))
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∑ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_AIRPORT)
def airport_handler(message):
    airport = message.text
    answer = CheckData().check_city(airport)
    if answer == True:
    # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
        users_state[message.chat.id].search_request_data.append_airport(airport)
        users_state[message.chat.id].state = UserStates.WAIT_FOR_TRANSIT_PERIOD
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skeep_tranzit'))
        bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥, –ª–∏–±–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä '5–¥', –ª–∏–±–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä '10—á'. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏, –≤ —á–µ–º —Ç—ã –∏–∑–º–µ—Ä—è–µ—à—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∞—Å–∞–¥–∫–∏ ;)\n–õ–∏–±–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç - –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ–≤–∞–∂–Ω–æ.",reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")

@bot.callback_query_handler(lambda callback_query: callback_query.data == "skeep_tranzit")
def skeep_tranzit_handler(callback_query):
    users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
    markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞–Ω–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏', callback_data='hate_airl'))
    markup.add(types.InlineKeyboardButton('*–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!*', callback_data='start_search'))
    bot.reply_to(callback_query.message, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup = markup)
@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_TRANSIT_PERIOD)
def transit_period_handler(message):
    time_tranzit = message.text
    answer = users_state[message.chat.id].search_request_data.append_time_tranzit(time_tranzit)
    if answer == True:
        users_state[message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
        markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞–Ω–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏', callback_data='hate_airl'))
        markup.add(types.InlineKeyboardButton('*–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!*', callback_data='start_search'))
        bot.send_message(message.chat.id, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup = markup)
    elif answer == False:
        bot.send_message(message.chat.id, text="–¢—Ä–∞–Ω–∑–∏—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –≤ –¥–Ω—è—Ö - —á–∏—Å–ª–æ —Å –±—É–∫–≤–æ–π '–¥', –∏–±–æ –≤ —á–∞—Å–∞—Ö - —á–∏—Å–ª–æ —Å –±—É–∫–≤–æ–π '—á'.\n–ù–∞–ø—Ä–∏–º–µ—Ä '7–¥' –∏–ª–∏ '12—á'.")

@bot.callback_query_handler(lambda callback_query: callback_query.data == "add_airport")
def add_air_handler(callback_query):
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_AIRPORT
    except KeyError:
        bot.send_message(callback_query.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å.\n–ù–∞–ø–æ–º–∏–Ω–∞—é:\n–ì–æ—Ä–æ–¥–∞ –ù–ï –∏–¥—É—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–µ–Ω—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—ë—Ç–µ.")
@bot.callback_query_handler(lambda callback_query: callback_query.data == "hate_airl")
def choose_hate_airl_handler(callback_query):
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_HATE_AIRL
    except KeyError:
        bot.send_message(callback_query.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        itembtn1 = types.KeyboardButton('–ü–æ–±–µ–¥–∞')
        itembtn2 = types.KeyboardButton('Azur Air')
        itembtn3 = types.KeyboardButton('Smartavia')
        itembtn4 = types.KeyboardButton('–Ø–º–∞–ª')
        itembtn5 = types.KeyboardButton('Azimut')
        itembtn6 = types.KeyboardButton('–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6)
        bot.reply_to(callback_query.message, "–í—ã–±–µ—Ä–∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª - –Ω–∞–∂–º–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!")
@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_HATE_AIRL)
def hate_airl_handler(message):
    hate_airl = message.text
    users_state[message.chat.id].search_request_data.append_hate_airl(hate_airl)
    users_state[message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
    markup.add(types.InlineKeyboardButton('*–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!*', callback_data='start_search'))
    bot.send_message(message.chat.id, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)

@bot.callback_query_handler(lambda callback_query: callback_query.data == "start_search")
def start_search_handler(callback_query):
    # TODO
    # TODO: —Ç—É—Ç –ø–æ–ª—É—á–∞–µ—à—å —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∏ —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_END
    except:
        bot.send_message(callback_query.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        sr = Search()
        start_date, end_date, airports,start_period, end_period, home, finish, tranzit, hate_airl = users_state[callback_query.message.chat.id].search_request_data.start()
        _, all_routes = sr.compute_all_routes(start_date, end_date, airports,start_period, end_period, home, finish, tranzit, hate_airl)
        best_routes_price, _ = sr.find_cheapest_route(all_routes)
        best_routes_time, _ = sr.find_short_in_time_route(all_routes)
        if best_routes_price == [] and best_routes_time == []:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞!', callback_data='compute_route'))
            bot.reply_to(callback_query.message,
                         f'–û–≥–æ!üò≥ –° —Ç–∞–∫–∏–º–∏ –∂–µ—Å—Ç–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...\n\n–ü–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?',
                         reply_markup=markup)
        else:
            users_state[callback_query.message.chat.id].best_in_price = iter(best_routes_price)
            users_state[callback_query.message.chat.id].best_in_time = iter(best_routes_time)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
            markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
            suggested_by_price = next(users_state[callback_query.message.chat.id].best_in_price)
            suggested_by_time = next(users_state[callback_query.message.chat.id].best_in_time)
            all_route_cheap = f''
            for idx, flight in enumerate(suggested_by_price.storage):
                number = (idx + 1)
                first_airport = flight[0]
                second_airport = flight[1]
                dict_with_data = flight[2]
                price = dict_with_data['weight']
                departure = dict_with_data['time']
                airline = dict_with_data['airlines']
                time_in_sky = dict_with_data['time_in_sky']
                link = f"https://www.aviasales.ru{dict_with_data['link']}"
                route = f'{number}) –ò–∑ <b>{first_airport}üõ´</b>\n–í <b>{second_airport}üõ¨</b>\n–¶–µ–Ω–∞ —Ä–µ–π—Å–∞: {price}‚ÇΩ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {departure}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π—Å–∞: {time_in_sky}\'' \
                        f'\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline}\n<a href="{link}">‚úàÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç. –ù–∞–∂–º–∏!</a>\n'
                all_route_cheap += route
            all_route_fast = f''
            for idx, flight in enumerate(suggested_by_time.storage):
                number = (idx + 1)
                first_airport = flight[0]
                second_airport = flight[1]
                dict_with_data = flight[2]
                price = dict_with_data['weight']
                departure = dict_with_data['time']
                airline = dict_with_data['airlines']
                time_in_sky = dict_with_data['time_in_sky']
                link = f"https://www.aviasales.ru{dict_with_data['link']}"
                route = f'{number}) –ò–∑ <b>{first_airport}üõ´</b>\n–í <b>{second_airport}üõ¨</b>\n–¶–µ–Ω–∞ —Ä–µ–π—Å–∞: {price}‚ÇΩ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {departure}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π—Å–∞: {time_in_sky}\'' \
                        f'\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline}\n<a href="{link}">‚úàÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç. –ù–∞–∂–º–∏!</a>\n'
                all_route_fast += route
            bot.reply_to(callback_query.message,
                         f'üí∞<b>–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π</b>\nüí∏–¶–µ–Ω–∞ –∑–∞ –≤—Å–µ –ø–µ—Ä–µ–ª—ë—Ç—ã: {suggested_by_price.total_price()}‚ÇΩ\n\n{all_route_cheap}\n\n‚ö°Ô∏è<b>–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π</b>\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤: {suggested_by_time.total_time()}\n\n{all_route_fast}',
                         reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(lambda callback_query: callback_query.data == "show_next_cheap_flight")
def start_search_handler(callback_query):
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_MORE_TICKETS
    except:
        bot.send_message(callback_query.message.chat.id,
                             "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        try:
            suggested_by_price = next(users_state[callback_query.message.chat.id].best_in_price)
        except:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫!', callback_data='compute_route'))
            bot.reply_to(callback_query.message,
                         f'–£–≤—ã, –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –±–∏–ª–µ—Ç—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
                         reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
            markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
            all_route_cheap = f''
            for idx, flight in enumerate(suggested_by_price.storage):
                number = (idx + 1)
                first_airport = flight[0]
                second_airport = flight[1]
                dict_with_data = flight[2]
                price = dict_with_data['weight']
                departure = dict_with_data['time']
                airline = dict_with_data['airlines']
                time_in_sky = dict_with_data['time_in_sky']
                link = f"https://www.aviasales.ru{dict_with_data['link']}"
                route = f'{number}) –ò–∑ <b>{first_airport}üõ´</b>\n–í <b>{second_airport}üõ¨</b>\n–¶–µ–Ω–∞ —Ä–µ–π—Å–∞: {price}‚ÇΩ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {departure}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π—Å–∞: {time_in_sky}\'' \
                        f'\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline}\n<a href="{link}">‚úàÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç. –ù–∞–∂–º–∏!</a>\n'
                all_route_cheap += route
            bot.reply_to(callback_query.message,
                         f'üí∞<b>–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π</b>\nüí∏–¶–µ–Ω–∞ –∑–∞ –≤—Å–µ –ø–µ—Ä–µ–ª—ë—Ç—ã: {suggested_by_price.total_price()}‚ÇΩ\n\n{all_route_cheap}\n',
                         reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(lambda callback_query: callback_query.data == "show_next_fast_flight")
def start_search_handler(callback_query):
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_MORE_TICKETS
    except:
        bot.send_message(callback_query.message.chat.id,
                                 "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        try:
            suggesed_by_time = next(users_state[callback_query.message.chat.id].best_in_time)
        except:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫!', callback_data='compute_route'))
            bot.reply_to(callback_query.message,
                                 f'–£–≤—ã, –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –±–∏–ª–µ—Ç—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
                                 reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
            markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
            all_route_fast = f''
            for idx, flight in enumerate(suggested_by_time.storage):
                number = (idx + 1)
                first_airport = flight[0]
                second_airport = flight[1]
                dict_with_data = flight[2]
                price = dict_with_data['weight']
                departure = dict_with_data['time']
                airline = dict_with_data['airlines']
                time_in_sky = dict_with_data['time_in_sky']
                link = f"https://www.aviasales.ru{dict_with_data['link']}"
                route = f'{number}) –ò–∑ <b>{first_airport}üõ´</b>\n–í <b>{second_airport}üõ¨</b>\n–¶–µ–Ω–∞ —Ä–µ–π—Å–∞: {price}‚ÇΩ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {departure}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π—Å–∞: {time_in_sky} –º–∏–Ω\'' \
                        f'\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline}\n<a href="{link}">‚úàÔ∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç. –ù–∞–∂–º–∏!</a>\n'
                all_route_fast += route
            bot.reply_to(callback_query.message,
                                 f'‚ö°Ô∏è<b>–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π</b>\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤: {suggested_by_time.total_time()}–º–∏–Ω\n\n{all_route_fast}',
                         reply_markup=markup, parse_mode="HTML")





    # –°–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ
    # –ó–∞—Ç–µ–º –ø–µ—Ä–µ–≥–æ–Ω—è–µ—à—å –∏—Ö –≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫–∞–∫ `best_in_price = iter(best_in_price)`
    # –ó–∞—Ç–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–∞ users_state[callback_query.message.chat.id] –∫–ª–∞–¥–µ—à—å –ø–æ–ª—É—á–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã best_in_price –∏ best_in_time
    # –ó–∞—Ç–µ–º –≤ —Ä–µ–ø–ª–∞–π –∫–∏–¥–∞–µ—à—å next(best_in_price) –∏ next(best_in_time)


    # –ú–µ—Ç–æ–¥—ã –∫–Ω–æ–ø–æ–∫ –≤–Ω–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    # –ö–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ "–±–æ–ª—å—à–µ –¥–µ—à–µ–≤—ã—Ö" –∏–ª–∏ "–±–æ–ª—å—à–µ –±—ã—Å—Ç—Ä—ã—Ö" –∏–¥–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–∞ –∏ –¥–µ–ª–∞–µ—Ç next(users_state[callback_query.message.chat.id].best_in_price) –∏–ª–∏ next(users_state[callback_query.message.chat.id].best_in_time)
    # –°–¥–µ–ª–∞–π –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —Å–ª—É—á–∞–π StopIteration - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã –ø–æ–∫–∞–∑–∞–ª–∞ –≤—Å—ë, —á—Ç–æ –µ—Å—Ç—å –∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ "–ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"


    # users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_END
    # date = users_state[callback_query.message.chat.id].search_request_data.constructor_answer()
    # score = 0
    # route_for_show = best_in_price[0]
    # route_for_show_time = best_in_time[0]
    # for score_t in route_for_show_time:
    #     for score_p in route_for_show:
    #         all_flight_p = f''
    #         all_flight_t = f''
    #         for flight_p in route_for_show:
    #             for flight_t in route_for_show_time[0]:
    #                 score += 1
    #                 data_for_show = flight_p[2]
    #                 data_for_show_time = flight_t[2]
    #                 one_flight_p = f'{score}) –ò–∑ {score_p[0]} –≤ {score_p[1]}\n\n–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {data_for_show["weight"]}\n\–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data_for_show["time"]}\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {data_for_show["airlines"]}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç: aviasales.ru{data_for_show["link"]}'
    #                 one_flight_t = f'{score}) –ò–∑ {score_t[0]} –≤ {score_t[1]}\n\n–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {data_for_show_time["weight"]}\n\–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data_for_show_time["time"]}\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {data_for_show_time["airlines"]}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç: aviasales.ru{data_for_show_time["link"]}'
    #                 all_flight_p += one_flight_p
    #                 all_flight_t += one_flight_t
    # markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
    # markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
    # bot.reply_to(callback_query.message,f'–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π. –¶–µ–Ω–∞: {best_in_price[1]}\n–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö:\n\n{all_flight_p}\n\n–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π.\n–í—Ä–µ–º—è: {route_for_show_time[1]}\n–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö:\n\n{all_flight_t}',
    #              reply_markup=markup)

@bot.callback_query_handler(lambda callback_query: callback_query.data == "compute_route")
def compute_route_handler(callback_query):
    users_state[callback_query.message.chat.id] = UserState()
    users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_HOME
    bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä - –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥.")

@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_HOME)
def home_handler(message):
    home = message.text
    answer = CheckData().check_city(home)
    if answer == True:
    # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
        users_state[message.chat.id].search_request_data.append_home(home)
        users_state[message.chat.id].state = UserStates.WAIT_FOR_DATA_HOME_DEPARTURE
        bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")
    else:
        bot.send_message(message.chat.id, text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")

@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_DATA_HOME_DEPARTURE)
def period_for_home_departure_handler(message):
    period_or_date = message.text
    answer_bool = users_state[message.chat.id].search_request_data.set_start_date(period_or_date)
    if answer_bool == True:
        users_state[message.chat.id].state = UserStates.WAIT_FOR_CIRCLE_OR_NOT
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ö–æ–ª—å—Ü–µ–≤–æ–π', callback_data='circle'))
        markup.add(types.InlineKeyboardButton('–í –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü', callback_data='one_way'))
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏, —Ç–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∫–æ–ª—å—Ü–µ–≤–æ–π (—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –≤—ã–ª–µ—Ç–∞) –∏–ª–∏ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –ø—Ä–∏–ª–µ—Ç–∞?", reply_markup=markup)
    elif answer_bool == False:
        bot.send_message(message.chat.id,
                         text="–î–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –µ–µ, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n–¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD` ")


@bot.callback_query_handler(lambda callback_query: callback_query.data == "circle")
def circle_handler(callback_query):
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_FINISH_DEPARTURE
    except KeyError:
        bot.send_message(callback_query.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        users_state[callback_query.message.chat.id].search_request_data.append_circle(True)
        bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞. –ü–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")

@bot.callback_query_handler(lambda callback_query: callback_query.data == "one_way")
def one_way_handler(callback_query):
    # users_state[callback_query.message.chat_id].search_request_data.append_circle(False)
    try:
        users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_FINISH_AIRPORT
    except KeyError:
        bot.send_message(callback_query.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
    else:
        bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ú–æ–¥–µ–ª—å —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–ª—è –Ω–µ–≥–æ.")

@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_FINISH_AIRPORT)
def finish_airport_handler(message):
    airport = message.text
    answer = CheckData().check_city(airport)
    if answer == True:
    # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
        users_state[message.chat.id].search_request_data.append_finish_airport(airport)
        users_state[message.chat.id].state = UserStates.WAIT_FOR_FINISH_DEPARTURE
        bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")
    else:
        bot.send_message(message.chat.id, text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")

@bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_FINISH_DEPARTURE)
def finish_date_or_period_handler(message):
    date_or_period = message.text
    answer = users_state[message.chat.id].search_request_data.append_date_or_period_to_finish(date_or_period)
    if answer == True:
        users_state[message.chat.id].state = UserStates.WAIT_FOR_AIRPORT
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å.\n–ù–∞–ø–æ–º–∏–Ω–∞—é:\n–ì–æ—Ä–æ–¥–∞ –ù–ï –∏–¥—É—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–µ–Ω—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—ë—Ç–µ")
    else:
        bot.send_message(message.chat.id,
                         text="–î–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –µ–µ, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n–¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD` ")


bot.polling(none_stop=True, interval=0)

#—Å–¥–µ–ª–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–∞—Ç—É, —á—Ç–æ –ø–µ—Ä–≤–∞—è –Ω–µ –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–π (–ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–µ) –∏ —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞, –∞ –Ω–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ —Å–µ–π—á–∞—Å)
#—É–±–µ—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ª–æ–º–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç. –ø–∏—à–µ—Ç, –Ω–µ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
#—É–±–µ—Ä–∏ –∏–ª–∏ –æ–±–¥—É–º–∞–π hate_airl
#—Å–¥–µ–ª–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ —á—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –≤—ã–ª–µ—Ç–∞ –≤ –ù–ï –∫–æ–ª—å—Ü–µ–≤–æ–º –º–∞—Ä—à—Ä—É—Ç–µ

