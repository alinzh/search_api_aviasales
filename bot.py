import telebot
from telebot import types
from route import Route
from search import Search
from serchrequestdata import SearchRequestData
from check_answer import CheckData
import sql_users
from enum import IntEnum
import text_for_send_message_bot

if __name__ == "__main__":
        telebot.apihelper.ENABLE_MIDDLEWARE = True
        telebot.apihelper.SESSION_TIME_TO_LIVE = 5 * 60
        bot = telebot.TeleBot("6182172702:AAE-aoQSvCTuyIWKv6zCrXMDM4CB6sYbJtY", parse_mode=None)

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–ª–∞–≥–æ–≤, —á—Ç–æ –≤–≤–æ–¥—è—Ç —é–∑–µ—Ä—ã (—Ç—É—Ç –≤—Å–µ, –∫—Ç–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —á—Ç–æ-—Ç–æ –≤–≤–æ–¥–∏—Ç)
        users_state = {}

        class UserStates(IntEnum):
            WAIT_FOR_TRANSIT_PERIOD = 1
            WAIT_FOR_AIRPORT = 2
            WAIT_FOR_START = 3
            WAIT_FOR_HOME = 4
            WAIT_FOR_DATA_HOME_DEPARTURE = 5
            WAIT_FOR_CIRCLE_OR_NOT = 6
            WAIT_FOR_FINISH_DEPARTURE = 7
            WAIT_FOR_CHOOSE = 8
            WAIT_FOR_HATE_AIRL = 9
            WAIT_FOR_END = 10
            WAIT_FOR_FINISH_AIRPORT = 11
            WAIT_FOR_MORE_TICKETS = 12

        class UserState:
            def __init__(self, user_id):
                self.state = None
                self.user_id = user_id
                self.search_request_data = SearchRequestData(user_id=self.user_id)
                self.best_in_price = None
                self.best_in_time = None

        # sql_users.create_table_in_database()
        date_from_sql_users = sql_users.get_all_data_from_table()
        date_from_sql_users_airport = sql_users.get_all_data_from_users_airport()
        date_from_sql_users_tranzit = sql_users.get_all_data_from_users_tranzit()
        # TODO –ß–µ–∫–Ω–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAIT_FOR_CHOOSE (–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É)

        for i in date_from_sql_users:
            if (date_from_sql_users != None) or (date_from_sql_users != []):
                user_id = i[0]
                state = i[3]
                users_state[user_id] = UserState(user_id = user_id)
                users_state[user_id].state = state
                try:
                    users_state[user_id].search_request_data.append_start_date_exception_sql(i[4])
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_end_date_exception_sql(i[5])
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_start_period_exception_sql(eval(i[6]))
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_end_period_exception_sql(eval(i[7]))
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_home_exception_sql(i[8])
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_finish_exception_sql(i[9])
                except:
                    pass
                try:
                    users_state[user_id].search_request_data.append_hate_airl_exception_sql(eval(i[10]))
                except:
                    pass
        for string in date_from_sql_users_airport:
            user_id = string[0]
            users_state[user_id].search_request_data.append_airport(string[1])
        for string in date_from_sql_users_tranzit:
            user_id = string[0]
            users_state[user_id].search_request_data.append_time_tranzit_exception_sql((string[1], int(string[2])))

        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='compute_route'))
            bot.reply_to(message, text = text_for_send_message_bot.message_hello(), reply_markup=markup, parse_mode="HTML")
            sql_users.add_users_to_sql([(message.from_user.id, message.from_user.username, message.from_user.full_name, 0, '', '', '', '', '', '', '[]')])
            sql_users.users_all_the_time(message.from_user.id, message.from_user.username, message.from_user.full_name)
        @bot.callback_query_handler(lambda callback_query: callback_query.data == "compute_route")
        def compute_route_handler(callback_query):
            users_state[callback_query.message.chat.id] = UserState(callback_query.message.chat.id) #—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ UserState() —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—É—Ç!!
            users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_HOME
            sql_users.add_users_to_sql([(callback_query.from_user.id, callback_query.from_user.username, callback_query.from_user.full_name, 0, '',
                                         '', '', '', '', '', '[]')])
            sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. \n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä - –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>.", parse_mode="HTML")

        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_AIRPORT)
        def airport_handler(message):
            airport = message.text
            answer = CheckData().check_city(airport)
            answer_2 = CheckData().check_if_city_in_route(airport, users_state[message.chat.id].search_request_data.airports)
            check_on_len_route = CheckData().check_quantity_of_citys(users_state[message.chat.id].search_request_data.airports, users_state[message.chat.id].search_request_data.home, users_state[message.chat.id].search_request_data.finish)
            if (answer == True) and (answer_2 == True) and (check_on_len_route == True):
            # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
                users_state[message.chat.id].search_request_data.append_airport(airport)
                users_state[message.chat.id].state = UserStates.WAIT_FOR_TRANSIT_PERIOD
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skeep_tranzit'))
                bot.send_message(message.chat.id, text="üïò–ù–∞–ø–∏—à–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥. \n\n<i>–ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä - '5–¥', –ª–∏–±–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä - '10—á'.</i>",reply_markup=markup, parse_mode="HTML")
            elif answer != True:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.")
            elif check_on_len_route != True:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!', callback_data='start_search'))
                markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞–Ω–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏', callback_data='hate_airl'))
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. \n–ù–∞—á–Ω–µ–º –ø–æ–∏—Å–∫?", reply_markup = markup)
            else:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π.")
        @bot.callback_query_handler(lambda callback_query: callback_query.data == "skeep_tranzit")
        def skeep_tranzit_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
            except KeyError:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
                markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞–Ω–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏', callback_data='hate_airl'))
                markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!', callback_data='start_search'))
                bot.reply_to(callback_query.message, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup = markup)
        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_TRANSIT_PERIOD)
        def transit_period_handler(message):
            time_tranzit = message.text
            answer = users_state[message.chat.id].search_request_data.append_time_tranzit(time_tranzit)
            if answer == True:
                users_state[message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
                markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞–Ω–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏', callback_data='hate_airl'))
                markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!', callback_data='start_search'))
                bot.send_message(message.chat.id, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup = markup)
            elif answer == False:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–¢—Ä–∞–Ω–∑–∏—Ç –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n–í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –≤ –¥–Ω—è—Ö - —á–∏—Å–ª–æ —Å –±—É–∫–≤–æ–π '–¥', –∏–±–æ –≤ —á–∞—Å–∞—Ö - —á–∏—Å–ª–æ —Å –±—É–∫–≤–æ–π '—á'.\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä '7–¥' –∏–ª–∏ '12—á'.</b>", parse_mode='HTML')

        @bot.callback_query_handler(lambda callback_query: callback_query.data == "add_airport")
        def add_air_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_AIRPORT
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except KeyError:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å.\n\n<i>‚òùÔ∏è–ì–æ—Ä–æ–¥–∞ –ù–ï –∏–¥—É—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–µ–Ω—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—ë—Ç–µ.</i>", parse_mode="HTML")
        @bot.callback_query_handler(lambda callback_query: callback_query.data == "hate_airl")
        def choose_hate_airl_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_HATE_AIRL
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except KeyError:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø–æ–¥–±–æ—Ä–∫—É. \n\n<i>–ü–∏—à–∏ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ü–æ–±–µ–¥–∞ –∏–ª–∏ –ê–∑–∏–º—É—Ç.</i>", parse_mode="HTML")
        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_HATE_AIRL)
        def hate_airl_handler(message):
            hate_airl = message.text
            answer = users_state[message.chat.id].search_request_data.append_hate_airl(hate_airl)
            if answer == True:
                users_state[message.chat.id].state = UserStates.WAIT_FOR_CHOOSE
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='add_airport'))
                markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!', callback_data='start_search'))
                markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π', callback_data='hate_airl'))
                bot.send_message(message.chat.id, text="–°—É–ø–µ—Ä! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –ø–∏—à–∏ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.\n–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è - –ø–æ—Å–º–æ—Ç—Ä–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'–†–µ–¥ –í–∏–Ω–≥—Å' –∏–ª–∏ '–°–µ–≤–µ—Ä–Ω—ã–π –í–µ—Ç–µ—Ä (Nordwind Airlines)'")

        @bot.callback_query_handler(lambda callback_query: callback_query.data == "start_search")
        def start_search_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_END
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                sr = Search()
                start_date, end_date, airports,start_period, end_period, home, finish, tranzit, hate_airl = users_state[callback_query.message.chat.id].search_request_data.start()
                bot.send_message(callback_query.message.chat.id,
                                 text=text_for_send_message_bot.message_search_began_wait(home, finish, start_period,
                                                                                          end_period, airports, tranzit,
                                                                                          hate_airl), parse_mode="HTML")
                _, all_routes = sr.compute_all_routes(start_date, end_date, airports,start_period, end_period, home, finish, tranzit, hate_airl)
                best_routes_price, _ = sr.find_cheapest_route(all_routes)
                best_routes_time, _ = sr.find_short_in_time_route(all_routes)
                if best_routes_price == [] and best_routes_time == []:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞!', callback_data='compute_route'))
                    bot.reply_to(callback_query.message,
                                 f'–û–≥–æ!üò≥ –° —Ç–∞–∫–∏–º–∏ –∂–µ—Å—Ç–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...\n\n–ü–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?',
                                 reply_markup=markup)
                    sql_users.delete_airports(callback_query.message.chat.id)
                    sql_users.delete_tranzit(callback_query.message.chat.id)
                    sql_users.delete_user(callback_query.message.chat.id)
                else:
                    users_state[callback_query.message.chat.id].best_in_price = iter(best_routes_price)
                    users_state[callback_query.message.chat.id].best_in_time = iter(best_routes_time)
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
                    markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!', callback_data='compute_route'))
                    suggested_by_price = next(users_state[callback_query.message.chat.id].best_in_price)
                    suggested_by_time = next(users_state[callback_query.message.chat.id].best_in_time)
                    bot.reply_to(callback_query.message,
                                  text=text_for_send_message_bot.answer_with_tickets_for_user(suggested_by_price, suggested_by_time),
                                 reply_markup=markup, parse_mode="HTML")
                    sql_users.delete_airports(callback_query.message.chat.id)
                    sql_users.delete_tranzit(callback_query.message.chat.id)
                    sql_users.delete_user(callback_query.message.chat.id)

        @bot.callback_query_handler(lambda callback_query: callback_query.data == "show_next_cheap_flight")
        def start_search_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_MORE_TICKETS
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except:
                bot.send_message(callback_query.message.chat.id,
                                     "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                try:
                    suggested_by_price = next(users_state[callback_query.message.chat.id].best_in_price)
                except:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫!', callback_data='compute_route'))
                    bot.reply_to(callback_query.message,
                                 f'–£–≤—ã, –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –±–∏–ª–µ—Ç—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
                                 reply_markup=markup)
                else:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
                    markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!', callback_data='compute_route'))
                    bot.reply_to(callback_query.message,
                                 text=text_for_send_message_bot.message_answer_tickets_more_cheap(suggested_by_price),
                                 reply_markup=markup, parse_mode="HTML")

        @bot.callback_query_handler(lambda callback_query: callback_query.data == "show_next_fast_flight")
        def start_search_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_MORE_TICKETS
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except:
                bot.send_message(callback_query.message.chat.id,
                                         "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                try:
                    suggested_by_time = next(users_state[callback_query.message.chat.id].best_in_time)
                except:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫!', callback_data='compute_route'))
                    bot.reply_to(callback_query.message,
                                         f'–£–≤—ã, –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –±–∏–ª–µ—Ç—ã.\n–ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
                                         reply_markup=markup)
                else:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –¥–µ—à–µ–≤—ã—Ö', callback_data='show_next_cheap_flight'))
                    markup.add(types.InlineKeyboardButton('–ï—â–µ –±—ã—Å—Ç—Ä—ã—Ö', callback_data='show_next_fast_flight'))
                    markup.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!', callback_data='compute_route'))
                    bot.reply_to(callback_query.message,
                                         text=text_for_send_message_bot.message_answer_tickets_more_short(suggested_by_time),
                                 reply_markup=markup, parse_mode="HTML")

        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_HOME)
        def home_handler(message):
            home = message.text
            answer = CheckData().check_city(home)
            if answer == True:
            # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
                users_state[message.chat.id].search_request_data.append_home(home)
                users_state[message.chat.id].state = UserStates.WAIT_FOR_DATA_HOME_DEPARTURE
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")
            else:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")

        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_DATA_HOME_DEPARTURE)
        def period_for_home_departure_handler(message):
            period_or_date = message.text
            answer_bool = users_state[message.chat.id].search_request_data.set_start_date(period_or_date)
            if answer_bool == True:
                users_state[message.chat.id].state = UserStates.WAIT_FOR_CIRCLE_OR_NOT
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–ö–æ–ª—å—Ü–µ–≤–æ–π', callback_data='circle'))
                markup.add(types.InlineKeyboardButton('–í –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü', callback_data='one_way'))
                bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è –º–∞—Ä—à—Ä—É—Ç.\n\n<i>–ö–æ–ª—å—Ü–µ–≤–æ–π - —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –≤—ã–ª–µ—Ç–∞. \n–í –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü - –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º –ø—Ä–∏–ª–µ—Ç–∞.</i>", reply_markup=markup, parse_mode="HTML")
            elif answer_bool == False:
                bot.send_message(message.chat.id,
                                 text="‚ö†Ô∏è–î–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø–∏—à–∏ –µ–µ, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n- —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ `YYYY.MM.DD` \n- –ø–µ—Ä–∏–æ–¥ `YYYY.MM.DD - YYYY.MM.DD`")


        @bot.callback_query_handler(lambda callback_query: callback_query.data == "circle")
        def circle_handler(callback_query):
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_FINISH_DEPARTURE
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)

            except KeyError:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                users_state[callback_query.message.chat.id].search_request_data.append_circle(True)
                bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞. –ü–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")

        @bot.callback_query_handler(lambda callback_query: callback_query.data == "one_way")
        def one_way_handler(callback_query):
            # users_state[callback_query.message.chat_id].search_request_data.append_circle(False)
            try:
                users_state[callback_query.message.chat.id].state = UserStates.WAIT_FOR_FINISH_AIRPORT
                sql_users.update_user_state(callback_query.message.chat.id, users_state[callback_query.message.chat.id].state)
            except KeyError:
                bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
            else:
                bot.reply_to(callback_query.message, "–ù–∞–ø–∏—à–∏ –∫—Ä–∞–π–Ω–∏–π –≥–æ—Ä–æ–¥ –≤ —Ç–≤–æ—ë–º –º–∞—Ä—à—Ä—É—Ç–µ. \n\n<i>–ú–æ–¥–µ–ª—å —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–ª—è –Ω–µ–≥–æ.</i>", parse_mode="HTML")

        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_FINISH_AIRPORT)
        def finish_airport_handler(message):
            airport = message.text
            answer = CheckData().check_city(airport)
            if answer == True:
            # TODO: –ß–µ–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ(–≥–æ—Ä–æ–¥) –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, —Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API aviasales, —á—Ç–æ–±—ã –ú–æ—Å–∫–≤–∞ —Å—Ç–∞–ª–∞ MOW, –Ω–∞–ø—Ä–∏–º–µ—Ä.
                answer = users_state[message.chat.id].search_request_data.append_finish_airport(airport)
                if answer == True:
                    users_state[message.chat.id].state = UserStates.WAIT_FOR_FINISH_DEPARTURE
                    sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                    bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD` –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY.MM.DD - YYYY.MM.DD`")
                else:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–ö–æ–ª—å—Ü–µ–≤–æ–π', callback_data='circle'))
                    bot.send_message(message.chat.id,
                                 text="‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≥–æ—Ä–æ–¥–æ–º –≤—ã–ª–µ—Ç–∞, —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∫–æ–ª—å—Ü–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ö–æ–ª—å—Ü–µ–≤–æ–π.", reply_markup=markup)

            else:
                bot.send_message(message.chat.id, text="‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ –≤ –ò.–ü. —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")

        @bot.message_handler(func=lambda message: message.chat.id in users_state and users_state[message.chat.id].state == UserStates.WAIT_FOR_FINISH_DEPARTURE)
        def finish_date_or_period_handler(message):
            date_or_period = message.text
            answer = users_state[message.chat.id].search_request_data.append_date_or_period_to_finish(date_or_period)
            check_duration = None
            if answer == True:
                check_duration = CheckData().check_period_duration(users_state[message.chat.id].search_request_data.start_date, users_state[message.chat.id].search_request_data.end_date)
            if (answer == True) and (check_duration == True):
                users_state[message.chat.id].state = UserStates.WAIT_FOR_AIRPORT
                sql_users.update_user_state(message.chat.id, users_state[message.chat.id].state)
                bot.send_message(message.chat.id, text="–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å.\n\n<i>‚òùÔ∏è–ì–æ—Ä–æ–¥–∞ –ù–ï –∏–¥—É—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Ü–µ–Ω—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—ë—Ç–µ.</i>", parse_mode="HTML")
            elif check_duration == False:
                bot.send_message(message.chat.id,
                                 text="‚ö†Ô∏è–£–∫–∞–∑–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥, –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 31 –¥–Ω—è. \n\n–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ª–µ—Ç–∞ –±—ã–ª –Ω–µ –±–æ–ª–µ–µ 3 –Ω–µ–¥–µ–ª—å.")
            else:
                bot.send_message(message.chat.id,
                                 text="‚ö†Ô∏è–î–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø–∏—à–∏ –µ–µ, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:\n- —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ `YYYY.MM.DD` \n- –ø–µ—Ä–∏–æ–¥ `YYYY.MM.DD - YYYY.MM.DD`")
        @bot.message_handler(commands=['request_to_sql'])
        def send_welcome(message):
            document_send = sql_users.convert_to_excel()
            bot.send_document(message.chat.id, document_send)

        bot.polling(none_stop=True, interval=0)

